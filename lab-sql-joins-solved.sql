-- List the number of films per category
SELECT 
    c.name AS category, 
    COUNT(f.film_id) AS number_of_films 
FROM category c
LEFT JOIN film_category fc ON c.category_id = fc.category_id
LEFT JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY number_of_films DESC;

-- Retrieve the store ID, city, and country for each store

SELECT 
    s.store_id, 
    ci.city, 
    co.country 
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars
SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue 
FROM store s
JOIN inventory i ON s.store_id = i.store_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category
SELECT 
    c.name AS category, 
    ROUND(AVG(f.length), 2) AS avg_running_time 
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC;

-- Identify the film categories with the longest average running time
SELECT 
    c.name AS category, 
    ROUND(AVG(f.length), 2) AS avg_running_time 
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC
LIMIT 5;

--  Display the top 10 most frequently rented movies in descending order
SELECT 
    f.title AS film_title, 
    COUNT(r.rental_id) AS rental_count 
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1
SELECT 
    f.title, 
    i.store_id, 
    COUNT(i.inventory_id) AS available_copies 
FROM film f
JOIN inventory i ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' 
  AND i.store_id = 1
GROUP BY f.title, i.store_id;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.
SELECT 
    f.title,
    CASE 
        WHEN IFNULL(COUNT(i.inventory_id), 0) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.film_id, f.title;


